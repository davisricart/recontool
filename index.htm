<!DOCTYPE html>
<!--
IMPORTANT: When deploying to GitHub Pages, create a file named ".nojekyll" (with no content) 
in the root of your repository to prevent Jekyll processing errors.
This empty file tells GitHub Pages not to process your site with Jekyll.
-->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compare Excel Files</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333; }
        button { padding: 10px; background: #007BFF; color: white; border: none; cursor: pointer; margin-right: 10px; }
        button:hover { background: #0056b3; }
        input { margin: 10px 0; padding: 5px; width: 100%; max-width: 300px; }
        #downloadArea { margin-top: 20px; display: none; }
        #previewArea { margin-top: 20px; display: none; }
        table { border-collapse: collapse; width: 100%; margin-top: 15px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        .preview-container { max-height: 400px; overflow-y: auto; margin-top: 15px; }
        .diff-added { background-color: #d4edda; }
        .diff-removed { background-color: #f8d7da; }
        .diff-changed { background-color: #fff3cd; }
        #status { color: red; font-weight: bold; }

        /* Drag and drop styles */
        .drop-area {
            border: 2px dashed #ccc;
            border-radius: 5px;
            padding: 20px;
            text-align: center;
            margin: 10px 0;
            max-width: 300px;
            transition: all 0.3s ease;
        }
        .drop-area.highlight {
            border-color: #007BFF;
            background-color: rgba(0, 123, 255, 0.1);
        }
        .drop-area p {
            margin: 0;
            color: #666;
        }
        .file-row {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .file-info {
            flex-grow: 1;
            margin-left: 10px;
        }
        .file-name {
            font-weight: bold;
            word-break: break-all;
        }
    </style>
</head>
<body>
    <h1>Compare Excel Files</h1>
    <form id="uploadForm">
        <div class="file-row">
            <div>
                <label for="file1">Upload First File:</label>
                <input type="file" id="file1" accept=".xlsx">
            </div>
            <div class="file-info" id="file1Info"></div>
        </div>
        <div class="drop-area" id="dropArea1">
            <p>Drag & drop Excel file here</p>
        </div>

        <div class="file-row">
            <div>
                <label for="file2">Upload Second File:</label>
                <input type="file" id="file2" accept=".xlsx">
            </div>
            <div class="file-info" id="file2Info"></div>
        </div>
        <div class="drop-area" id="dropArea2">
            <p>Drag & drop Excel file here</p>
        </div>

        <label for="scriptName">Enter Script Code:</label>
        <input type="text" id="scriptName" placeholder="Enter script code name" required><br>

        <button type="button" id="compareButton">Run Code</button>
        <button type="button" id="downloadButton" style="display: none;">Download Results</button><br>
        <p id="status"></p>
    </form>

    <div id="previewArea">
        <h3>Comparison Results</h3>
        <div class="preview-container">
            <table id="previewTable">
                <thead id="previewHeader"></thead>
                <tbody id="previewBody"></tbody>
            </table>
        </div>
    </div>

    <div id="downloadArea">
        <h3>Analysis Complete</h3>
        <p>Click the Download button to save the detailed comparison as an Excel file.</p>
    </div>

    <script>
        // GitHub repository information
        const REPO_OWNER = 'your-github-username';
        const REPO_NAME = 'excel-comparison-scripts';
        const SCRIPT_PATH = 'scripts'; // Folder in your repository containing scripts

        // Function to fetch script from GitHub
        async function fetchComparisonScript(scriptName) {
            const url = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${SCRIPT_PATH}/${scriptName}.js`;
            
            try {
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`Script not found: ${response.status}`);
                }
                
                const data = await response.json();
                const decodedContent = atob(data.content);
                return decodedContent;
            } catch (error) {
                console.error('Error fetching script:', error);
                throw error;
            }
        }
        
        // Function to read Excel file as ArrayBuffer
        function readExcelFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => resolve(e.target.result);
                reader.onerror = (e) => reject(e);
                reader.readAsArrayBuffer(file);
            });
        }
        
        // Main comparison function
        async function compareFiles() {
            const file1Input = document.getElementById('file1');
            const file2Input = document.getElementById('file2');
            const file1 = file1Input.files[0];
            const file2 = file2Input.files[0];
            const scriptName = document.getElementById('scriptName').value.trim();
            const status = document.getElementById('status');
            const previewArea = document.getElementById('previewArea');
            const downloadArea = document.getElementById('downloadArea');
            const downloadButton = document.getElementById('downloadButton');
            
            // Reset UI elements
            previewArea.style.display = 'none';
            downloadArea.style.display = 'none';
            downloadButton.style.display = 'none';
            
            if (!file1 || !file2) {
                status.textContent = 'Please upload both files.';
                return;
            }
            
            if (!scriptName) {
                status.textContent = 'Please enter a script code.';
                return;
            }
            
            try {
                status.textContent = 'Fetching comparison script...';
                
                // Fetch the comparison script from GitHub
                const scriptContent = await fetchComparisonScript(scriptName);
                
                // Create a function from the script content
                const CompareFunction = new Function('XLSX', 'workbook1', 'workbook2', scriptContent);
                
                status.textContent = 'Reading and comparing files...';
                
                // Read Excel files
                const content1 = await readExcelFile(file1);
                const content2 = await readExcelFile(file2);
                
                // Parse workbooks
                const workbook1 = XLSX.read(content1, {type: 'array'});
                const workbook2 = XLSX.read(content2, {type: 'array'});
                
                // Compare files using the fetched script
                const resultWorkbook = CompareFunction(XLSX, workbook1, workbook2);
                
                // Show preview
                showDifferencesPreview(resultWorkbook);
                
                // Show download area
                downloadArea.style.display = 'block';
                downloadButton.style.display = 'inline-block';
                previewArea.style.display = 'block';
                
                // Store result for download
                window.resultWorkbook = resultWorkbook;
                
                status.textContent = 'Comparison complete! Preview shown below.';
            } catch (error) {
                console.error('Error:', error);
                
                if (error.message.includes('Script not found') || error.message.includes('404')) {
                    status.textContent = 'No Code Found, please check the code and try again. If the problem persists please contact us';
                } else {
                    status.textContent = 'Error: ' + error.message;
                }
            }
        }
        
        // Function to show differences in the preview area
        function showDifferencesPreview(workbook) {
            const previewHeader = document.getElementById('previewHeader');
            const previewBody = document.getElementById('previewBody');
            
            // Clear existing preview
            previewHeader.innerHTML = '';
            previewBody.innerHTML = '';
            
            // Get the Differences sheet
            const sheet = workbook.Sheets['Differences'];
            
            // Convert to JSON
            const jsonData = XLSX.utils.sheet_to_json(sheet, {header: 1});
            
            if (jsonData.length <= 1) {
                previewBody.innerHTML = '<tr><td colspan="6" style="text-align:center">No differences found between the files</td></tr>';
                return;
            }
            
            // Create header row
            const headerRow = document.createElement('tr');
            jsonData[0].forEach(header => {
                const th = document.createElement('th');
                th.textContent = header;
                headerRow.appendChild(th);
            });
            previewHeader.appendChild(headerRow);
            
            // Create data rows (limit to 500 rows for preview)
            const maxRows = Math.min(500, jsonData.length - 1);
            for (let i = 1; i <= maxRows; i++) {
                const dataRow = document.createElement('tr');
                
                // Get the status for styling
                const status = jsonData[i][5]; // Status is in the 6th column
                
                if (status === 'ADDED') {
                    dataRow.classList.add('diff-added');
                } else if (status === 'REMOVED') {
                    dataRow.classList.add('diff-removed');
                } else if (status === 'CHANGED') {
                    dataRow.classList.add('diff-changed');
                }
                
                jsonData[i].forEach(cell => {
                    const td = document.createElement('td');
                    td.textContent = cell !== undefined ? cell : '';
                    dataRow.appendChild(td);
                });
                previewBody.appendChild(dataRow);
            }
            
            // Add message if data was truncated
            if (jsonData.length - 1 > maxRows) {
                const messageRow = document.createElement('tr');
                const messageCell = document.createElement('td');
                messageCell.colSpan = jsonData[0].length;
                messageCell.textContent = `Showing ${maxRows} of ${jsonData.length - 1} differences. Download for complete results.`;
                messageCell.style.textAlign = 'center';
                messageCell.style.fontStyle = 'italic';
                messageRow.appendChild(messageCell);
                previewBody.appendChild(messageRow);
            }
        }
        
        // Function to update file info display
        function updateFileInfo(fileInput, infoElement) {
            if (fileInput.files && fileInput.files[0]) {
                const file = fileInput.files[0];
                infoElement.innerHTML = `
                    <div class="file-name">${file.name}</div>
                    <div>${(file.size / 1024).toFixed(2)} KB</div>
                `;
            } else {
                infoElement.innerHTML = '';
            }
        }
        
        // Setup drag and drop functionality
        function setupDragAndDrop() {
            const dropAreas = [
                { area: document.getElementById('dropArea1'), input: document.getElementById('file1'), info: document.getElementById('file1Info') },
                { area: document.getElementById('dropArea2'), input: document.getElementById('file2'), info: document.getElementById('file2Info') }
            ];
            
            dropAreas.forEach(({ area, input, info }) => {
                // Prevent default drag behaviors
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    area.addEventListener(eventName, preventDefaults, false);
                });
                
                // Highlight drop area when item is dragged over it
                ['dragenter', 'dragover'].forEach(eventName => {
                    area.addEventListener(eventName, () => {
                        area.classList.add('highlight');
                    }, false);
                });
                
                // Remove highlight when item is dragged out or dropped
                ['dragleave', 'drop'].forEach(eventName => {
                    area.addEventListener(eventName, () => {
                        area.classList.remove('highlight');
                    }, false);
                });
                
                // Handle dropped files
                area.addEventListener('drop', (e) => {
                    const dt = e.dataTransfer;
                    const files = dt.files;
                    
                    if (files.length) {
                        // Only use the first file if multiple are dropped
                        const file = files[0];
                        
                        // Check if the dropped file is an Excel file
                        if (file.name.endsWith('.xlsx')) {
                            // Create a DataTransfer object to set the file input
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(file);
                            input.files = dataTransfer.files;
                            
                            // Update the file info display
                            updateFileInfo(input, info);
                        } else {
                            alert('Please drop only Excel (.xlsx) files.');
                        }
                    }
                }, false);
            });
            
            // Monitor file input changes to update info display
            document.getElementById('file1').addEventListener('change', function() {
                updateFileInfo(this, document.getElementById('file1Info'));
            });
            
            document.getElementById('file2').addEventListener('change', function() {
                updateFileInfo(this, document.getElementById('file2Info'));
            });
            
            // Prevent defaults for drag events
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
        }
        
        // Initialize all event listeners
        function initializeApp() {
            // Setup drag and drop
            setupDragAndDrop();
            
            // Download button event
            document.getElementById('downloadButton').addEventListener('click', () => {
                if (!window.resultWorkbook) {
                    document.getElementById('status').textContent = 'No comparison results available.';
                    return;
                }
                
                // Generate filename with timestamp
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
                const filename = `excel_comparison_${timestamp}.xlsx`;
                
                // Write the workbook to a file
                XLSX.writeFile(window.resultWorkbook, filename);
                document.getElementById('status').textContent = `File "${filename}" downloaded.`;
            });
            
            // Compare button event
            document.getElementById('compareButton').addEventListener('click', compareFiles);
        }
        
        // Initialize when the page loads
        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
</body>
</html>